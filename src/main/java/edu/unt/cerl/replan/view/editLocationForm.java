/*
 * @author josh
 *
 * Created on Nov 11, 2013, 3:59:06 PM
 */
package edu.unt.cerl.replan.view;

// Unused imports now because the google geocoding is commented out
//import com.google.code.geocoder.Geocoder;
//import com.google.code.geocoder.GeocoderRequestBuilder;
//import com.google.code.geocoder.model.GeocodeResponse;
//import com.google.code.geocoder.model.GeocoderRequest;
//import com.google.code.geocoder.model.GeocoderResult;
//import com.google.code.geocoder.model.LatLng;
//import com.google.code.geocoder.model.LatLngBounds;
//import java.util.List;
//import java.util.Locale;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author josh
 */
public class editLocationForm extends javax.swing.JDialog {
    
    public Double lon, lat;
    public String street,city,zip,address, lonLat;
    private boolean isValid, addressIsValid, lonLatIsValid;
    public boolean formIsValid, foundAddress, foundCoordinates;
    public boolean isUsingGeocoding;
    
    /** Creates new form editLocationForm */
    public editLocationForm(java.awt.Frame parent, boolean modal, boolean useGeocoding) {

        // The following three lines of code are needed
        super((java.awt.Frame) null, true);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        initComponents();
        
        formIsValid = foundAddress = foundCoordinates = false;
        
        // set images for buttons
        ImageIcon temp, leftArrowImage, rightArrowImage;
        Image rImage,newRImage;

        // set image for getAddressButton button
        temp = new ImageIcon("leftArrow.jpg");
        rImage = temp.getImage();
        newRImage = rImage.getScaledInstance(20, 15, java.awt.Image.SCALE_SMOOTH);
        leftArrowImage = new ImageIcon(newRImage);
        getAddressButton.setText(null);
        getAddressButton.setIcon(leftArrowImage);

        // set image for getLonLatButton button
        temp = new ImageIcon("rightArrow.jpg");
        rImage = temp.getImage();
        newRImage = rImage.getScaledInstance(20, 15, java.awt.Image.SCALE_SMOOTH);
        rightArrowImage = new ImageIcon(newRImage);
        getLonLatButton.setText(null);
        getLonLatButton.setIcon(rightArrowImage);
        
        if (useGeocoding){
            isUsingGeocoding = true;
        }
        else{
            getAddressButton.setVisible(false);
            getLonLatButton.setVisible(false);
            jLabel6.setVisible(false);
            isUsingGeocoding = false;
        }
        
    }
    
    public void disableGeocoding(){
        isUsingGeocoding = false;
        getAddressButton.setVisible(false);
        getLonLatButton.setVisible(false);
        jLabel6.setVisible(false);
        isUsingGeocoding = false;
    }
    
    public void populateFields(String st, String ci, String zi, String la, String lo){
        if (st.equals("(Current address not given)") || st.isEmpty() || st.equals("<unnamed>")) {
            streetLabel.setText("");
            cityLabel.setText("");
            zipLabel.setText("");
        }
        else {
            streetLabel.setText(st);
            cityLabel.setText(ci);
            zipLabel.setText(zi);           
        }
        latLabel.setText(la);
        lonLabel.setText(lo);
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submitButton = new javax.swing.JButton();
        getAddressButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        getLonLatButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        streetLabel = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        zipLabel = new javax.swing.JTextField();
        cityLabel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lonLabel = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        latLabel = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Location");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        getAddressButton.setText("<-");
        getAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAddressButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Auto Fill:");

        getLonLatButton.setText("->");
        getLonLatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLonLatButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Street:");

        jLabel3.setText("Zipcode:");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18));
        jLabel7.setText("Address");

        jLabel2.setText("City:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(zipLabel)
                            .addComponent(cityLabel)
                            .addComponent(streetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(streetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(zipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("Longitude:");

        jLabel5.setText("Latitude:");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18));
        jLabel8.setText("Coordinates");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(latLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(lonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(latLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(getAddressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(getLonLatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)))
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(getAddressButton)
                                .addComponent(getLonLatButton)))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // validation check to see if input is all numbers of some sort
    public static boolean isNumeric(String str){
        return str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
    }
    
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        
        if (isUsingGeocoding) {
            isValid = addressIsValid = lonLatIsValid = false;
            // auto fill the lon & lat if the address if filled in only
            if (lonLabel.getText().isEmpty() || latLabel.getText().isEmpty() ||
                    lonLabel.getText().equals("0.0") || latLabel.getText().equals("0.0")) {       
                if (!streetLabel.getText().isEmpty() && !cityLabel.getText().isEmpty() && !zipLabel.getText().isEmpty() && editLocationForm.isNumeric(zipLabel.getText())){
                    this.getLonLatButtonActionPerformed(evt);
                    isValid = true;
                }
            }
            // auto fill the address if the lon & lat are filled only
            else if (streetLabel.getText().isEmpty() && cityLabel.getText().isEmpty() && zipLabel.getText().isEmpty() && !lonLabel.getText().isEmpty() && !latLabel.getText().isEmpty() && 
                     editLocationForm.isNumeric(lonLabel.getText()) && editLocationForm.isNumeric(latLabel.getText()) ) {
                     this.getAddressButtonActionPerformed(evt);
                     isValid = true;
            }
            // all feilds have something in them
            // validate data
            if (!isValid) {
                if (streetLabel.getText().isEmpty() || cityLabel.getText().isEmpty() 
                        || zipLabel.getText().isEmpty() || !editLocationForm.isNumeric(zipLabel.getText())) {
                    // check special case
                    if (!editLocationForm.isNumeric(lonLabel.getText()) || !editLocationForm.isNumeric(latLabel.getText())) {
                        if (streetLabel.getText().isEmpty() && cityLabel.getText().isEmpty() 
                                && zipLabel.getText().isEmpty()) {
                            addressIsValid = true;
                        }
                        else {
                            addressIsValid = false;
                            isValid = false;
                        }
                    }
                    else {
                        addressIsValid = false;
                        isValid = false;
                    }
                }
                else {
                    addressIsValid = true;
                }
                if  (lonLabel.getText().isEmpty() || !editLocationForm.isNumeric(lonLabel.getText()) 
                        || latLabel.getText().isEmpty() || !editLocationForm.isNumeric(latLabel.getText())){
                    // special case
                    if (!streetLabel.getText().isEmpty() && !cityLabel.getText().isEmpty() 
                        && !zipLabel.getText().isEmpty() && lonLabel.getText().isEmpty() && latLabel.getText().isEmpty()) {
                        lonLatIsValid = true;
                        isValid = false;
                    }
                    else {
                        lonLatIsValid = false;
                        isValid = false;
                    }
                }
                else {
                    lonLatIsValid = true;
                }           
                // keep the custom input by user if passes basic validation
                if (lonLatIsValid && addressIsValid){
                    isValid = true;
                }
            }
            
            
            if (isValid) {
                // store results
                lon = Double.parseDouble(lonLabel.getText());
                lat = Double.parseDouble(latLabel.getText());
                street = streetLabel.getText();
                city = cityLabel.getText();
                zip = zipLabel.getText();

                formIsValid = true;
                foundAddress = true;
                foundCoordinates = true;
                this.setVisible(false);
                dispose();
            }
            else{
                 if (streetLabel.getText().equals("<No address found>")) {
                    streetLabel.setText("(Current address not given)");
                    cityLabel.setText("");
                    zipLabel.setText("00000");
                    street = streetLabel.getText();
                    city = cityLabel.getText();
                    zip = zipLabel.getText();
                    lon = Double.parseDouble(lonLabel.getText());
                    lat = Double.parseDouble(latLabel.getText());
                    formIsValid = true;
                    foundAddress = false;
                    foundCoordinates = true;
                    this.setVisible(false);
                    dispose();
                 }
                 else if (lonLabel.getText().equals("<No coordinates found>")){
                     lonLabel.setText("0.0");
                     latLabel.setText("0.0");
                     street = streetLabel.getText();
                     city = cityLabel.getText();
                     zip = zipLabel.getText();
                     lon = Double.parseDouble(lonLabel.getText());
                     lat = Double.parseDouble(latLabel.getText());
                     formIsValid = true;
                     foundCoordinates = false;
                     foundAddress = true;
                     this.setVisible(false);
                     dispose();
                 }
                 else {
                     
                     String error = "";
                     if (!addressIsValid){
                         error += "*Address Information\n";
                     }
                     if (!lonLatIsValid){
                         error += "*Longitude & Latitude Information\n";
                     }
                     Object[] form = {
                         "Please fix the following fields:",
                          error,
                          "Or delete all values in it."
                     };
                     int option = JOptionPane.showConfirmDialog(null,form, "Please Correct Loction Values", JOptionPane.OK_CANCEL_OPTION);
                     
                 }
            }  
        }
        else{
            
            // set street
            if (!streetLabel.getText().isEmpty())
                street = streetLabel.getText();
            else
                street = "(Current address not given)";
            // set city
            if (!cityLabel.getText().isEmpty())
                city = cityLabel.getText();
            else
                city = "";
            // set zip
            if (!zipLabel.getText().isEmpty())
                zip = zipLabel.getText();
            else
                zip = "00000";
            
            // validate lon&lat
            if  (lonLabel.getText().isEmpty() || !editLocationForm.isNumeric(lonLabel.getText()) 
                        || latLabel.getText().isEmpty() || !editLocationForm.isNumeric(latLabel.getText())){
                lon = 0.0;
                lat = 0.0;
            }
            else {
                lon = Double.parseDouble(lonLabel.getText());
                lat = Double.parseDouble(latLabel.getText());
            }

            formIsValid = true;
            this.setVisible(false);
            dispose();
            
        }
    }//GEN-LAST:event_submitButtonActionPerformed
    
    // Reverse Geocoding - address lookup
    private void getAddressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAddressButtonActionPerformed
       
        // validation
        if  (!lonLabel.getText().isEmpty() && editLocationForm.isNumeric(lonLabel.getText()) 
             && !latLabel.getText().isEmpty() && editLocationForm.isNumeric(latLabel.getText())){
        
            
           ReverseGeocoding revGeo = new ReverseGeocoding();
           String[] addressComps = new String[3];

           // Google's Geocoding API:
           //String latLon = latLabel.getText().trim() + "," + lonLabel.getText().trim(); 
           //addressComps = revGeo.getData_Google_RGeocoder(latLon);

           // TAMU's Reverse Geocoding API:
           String TAMU_latLon = "lat=" + latLabel.getText().trim() + "&lon=" + lonLabel.getText().trim();
           addressComps = revGeo.getData_TAMU_RGeocoder(TAMU_latLon);
           
           if (addressComps == null){
               System.out.println("disabling the feature for the session!");
               disableGeocoding();
           }
           else {
               if (!addressComps[0].isEmpty() &&  !addressComps[1].isEmpty() && !addressComps[2].isEmpty()){
                   streetLabel.setText(addressComps[0]);
                   cityLabel.setText(addressComps[1]);
                   zipLabel.setText(addressComps[2]);
               }
               else {
                   streetLabel.setText("<No address found>");
                   cityLabel.setText("");
                   zipLabel.setText("");
               }
           }
        }
        else{
            int option = JOptionPane.showConfirmDialog(null,"Please fix the Longitude & Latitude Information, or delete all values in it.","Please Correct Loction Values", JOptionPane.OK_CANCEL_OPTION);
        }
        
    }//GEN-LAST:event_getAddressButtonActionPerformed
        
    
    // Geocoding - lonLat lookup
    private void getLonLatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLonLatButtonActionPerformed
        
        // Google's Geocoding API:
        /*
        address = (streetLabel.getText() + ", " + cityLabel.getText() + ", TX");
        System.out.println(address);
        
        final Geocoder geocoder = new Geocoder();
        GeocoderRequest geocoderRequest = new GeocoderRequestBuilder().setAddress(address).setLanguage("en").getGeocoderRequest();
        GeocodeResponse geocoderResponse = geocoder.geocode(geocoderRequest);
        List<GeocoderResult> results = geocoderResponse.getResults();
        //System.out.println(results);
        
        lon = results.get(0).getGeometry().getLocation().getLng().doubleValue();
        lat = results.get(0).getGeometry().getLocation().getLat().doubleValue();
        lonLabel.setText(lon.toString());
        latLabel.setText(lat.toString());
        */
        // validation
         if (!streetLabel.getText().isEmpty() && !cityLabel.getText().isEmpty() 
            && !zipLabel.getText().isEmpty() && editLocationForm.isNumeric(zipLabel.getText())) {
        
                // TAMU's Geocoding API:
                String TAMU_address = "streetAddress=" + streetLabel.getText().replaceAll(" ", "%20") + 
                                      "&city=" + cityLabel.getText().replaceAll(" ", "%20") + "&state=tx" +
                                      "&zip=" + zipLabel.getText().trim();

                //System.out.println(TAMU_address);

                TAMU_Geocoding geo = new TAMU_Geocoding();
                String[] latLonInfo = new String[2];

                latLonInfo = geo.getData_TAMU_Geocoder(TAMU_address);
                
                if (latLonInfo == null){
                    System.out.println("disabling the feature for the session!");
                    disableGeocoding();
                }
                else {
                    if (!latLonInfo[0].isEmpty() && !latLonInfo[1].isEmpty()) {
                        latLabel.setText(latLonInfo[0]);
                        lonLabel.setText(latLonInfo[1]);
                    }
                    else {
                        latLabel.setText("<No coordinates found>");
                        lonLabel.setText("");
                    }
                }
         }
         else {
             int option = JOptionPane.showConfirmDialog(null,"Please fix the Address Information, or delete all values in it.","Please Correct Loction Values", JOptionPane.OK_CANCEL_OPTION);
         }
    }//GEN-LAST:event_getLonLatButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editLocationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editLocationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editLocationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editLocationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                editLocationForm dialog = new editLocationForm(new javax.swing.JFrame(), true, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cityLabel;
    private javax.swing.JButton getAddressButton;
    private javax.swing.JButton getLonLatButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField latLabel;
    private javax.swing.JTextField lonLabel;
    private javax.swing.JTextField streetLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField zipLabel;
    // End of variables declaration//GEN-END:variables
}
