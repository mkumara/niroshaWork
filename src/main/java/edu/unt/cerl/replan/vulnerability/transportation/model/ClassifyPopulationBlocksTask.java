/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.unt.cerl.replan.vulnerability.transportation.model;

import edu.unt.cerl.applicationframework.model.DefaultConstants;
import edu.unt.cerl.applicationframework.model.DefaultStyles;
import edu.unt.cerl.replan.REPLAN;
import edu.unt.cerl.replan.controller.SwingWorkerTask;
import edu.unt.cerl.replan.model.ScenarioState;
import edu.unt.cerl.replan.view.IndeterminateProgressBar;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import org.geotools.filter.text.cql2.CQLException;

/**
 *
 * @author martyo
 */


public class ClassifyPopulationBlocksTask {
    
    private javax.swing.SwingWorker<Void, Void> statusBarWorker;

    public void classifyPopBlocks(){
        
        // Create the progress bar
        final IndeterminateProgressBar progressBar = new IndeterminateProgressBar(REPLAN.getMainFrame().getTabs().getSelectedScenario().getMapPane());
        // can copy the above line directly. The parameter passed simply specifies where to draw the progress bar.
        
        // Create the worker thread, it holds the work
        statusBarWorker = new javax.swing.SwingWorker<Void, Void>() { // create new thread
            @Override
            // Do process in background, return null
            public Void doInBackground() throws InterruptedException, SQLException, CQLException { // SwingWorker executes doInBackground()
                // start the progress bar
                progressBar.showProgressBar();
                
                // Do the classify pop blocks() work
                ScenarioState s = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState();
                String addColumnQuery = "ALTER TABLE " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + " ADD COLUMN class integer";
                System.out.println(addColumnQuery);
        
        
                REPLAN.getController().getConnection().createStatement().executeUpdate(addColumnQuery);

                // *** Need to automate finding of number of records in query below ***

                String quantileQuery = "UPDATE " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + " AS blocks "
                    + "SET class=rows_numbered.num/72 "
                    + "FROM ( "
                    + "SELECT  logrecno, row_number() over(ORDER BY total_none) num,  total_none "
                    + "FROM  " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + " "
                    + ") AS rows_numbered "
                    + "WHERE blocks.logrecno = rows_numbered.logrecno;";
                System.out.println(quantileQuery);

                REPLAN.getController().getConnection().createStatement().executeUpdate(quantileQuery);
                REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX, DefaultStyles.createClassifiedPolygonStyle(1.0, DefaultStyles.getClassFillColors(5), "class"), "Transportation Vulnerable Population");
                
                // remove the progress bar
                progressBar.removeProgressBar();
                // only return a value if someone needs information from this thread
        
                return null; // required in this instance
                // Don't forget to create and change state variable!!!
            }
        };
        
        // execute thread after its created
        this.statusBarWorker.execute();
        System.out.println("After execute");
    }
    
    
    
    
    
    public static void classifyPopBlocksAfter(String coverage_table, String vuln_table, String vuln_table_schema, String layerTitle, String coverageGeometryColumn, String newColumn) throws SQLException, CQLException {
        System.out.println("************************************");
        System.out.println("************************************");
        System.out.println("************************************");
        System.out.println("************************************");
        System.out.println("************************************");
        System.out.println("************************************");
        ScenarioState s = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState();
        String addColumnQuery = "ALTER TABLE " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + " ADD COLUMN "+newColumn+" integer";
        System.out.println(addColumnQuery);
        REPLAN.getController().getConnection().createStatement().executeUpdate(addColumnQuery);

        // *** Need to automate finding of number of records in query below ***



        String query = "UPDATE " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + " AS blocks "
                + "SET "+newColumn+"=class;";
        System.out.println(query);
        REPLAN.getController().getConnection().createStatement().executeUpdate(query);


        query = "UPDATE " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + " AS blocks "
                + "SET "+newColumn+"=0 "
                + "FROM " + coverage_table + " AS cov "
                + "WHERE ST_COVERS(cov."+coverageGeometryColumn+",blocks.the_geom);";
        System.out.println(query);
        REPLAN.getController().getConnection().createStatement().executeUpdate(query);

        query = "SELECT "+newColumn+", "+"the_geom"+" AS the_geom INTO " + vuln_table_schema + "." + vuln_table+" FROM " + ScenarioState.getAuthor() + "." + s.getWorkingCopyName() + DefaultConstants.BLOCK_SUFFIX + ";";
        System.out.println(query);
        
        REPLAN.getController().getConnection().createStatement().executeUpdate(query);       
        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(vuln_table, DefaultStyles.createClassifiedPolygonStyle(1.0, DefaultStyles.getClassFillColors(5), newColumn), layerTitle);
        // create class field in blocks table
        // classify blocks
/*
        JFrame frame = new JFrame("Transportation Vulnerability Legend");
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // currently closes RE-PLAN but shouldn't
        //frame.getContentPane().add(emptyLabel,BorderLayout.CENTER);
        frame.setSize(200, 200);
        frame.setVisible(true);

         */
        System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
    }
}
