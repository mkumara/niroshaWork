
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.unt.cerl.replan.vulnerability.transportation.model;

import edu.unt.cerl.applicationframework.model.DefaultConstants;
import edu.unt.cerl.applicationframework.model.DefaultStyles;
import edu.unt.cerl.replan.REPLAN;
import edu.unt.cerl.replan.model.ScenarioState;
import java.awt.Color;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import org.geotools.filter.text.cql2.CQLException;

/**
 *
 * @author martyo
 */
public class DetermineLocsWithBestCoverage {

    public static void calculateCoverageAreas(double dw) throws SQLException {
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();
        if (!REPLAN.getQueries().tableExists(author, scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX, c)) {
            String createStopsQuery = "SELECT * INTO " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " FROM martyo.tarrant_gtfs_stops;";
            System.out.println(createStopsQuery);
            c.createStatement().executeUpdate(createStopsQuery);
        }

        ResultSet results;
        String query;

        /*
        if (!REPLAN.getQueries().columnExists(author, scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX, "catchment_area", c)) {
        String create_column_query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " ADD COLUMN catchment_area integer;";
        System.out.println(create_column_query);
        c.createStatement().executeUpdate(create_column_query);
        }
        
        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " AS stop "
        + "SET  catchment_area=ca.id "
        + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
        + "WHERE  ST_CONTAINS(ST_TRANSFORM(stop.the_geom,32138),ST_TRANSFORM(ca.the_geom,32138)); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);
        
        query = "SELECT stop.*, ca.id FROM " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " AS stop, "
        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
        + "WHERE ST_TOUCHES(ST_TRANSFORM(stop.the_geom, 32138),ST_TRANSFORM(ca.the_geom, 32138));";
        System.out.println(query);
        results = c.createStatement().executeQuery(query);
        
        
        //boolean first_time_seen = true;
        int last_one_seen = -999;
        int first_one_of_these_assigned_to = -999;
        while (results.next()) {
        System.out.println("On the border: " + results.getInt("stop_id") + " " + results.getInt("id"));
        if (last_one_seen != results.getInt("stop_id")) { // this is the first time we've seen it, so we can just update
        first_one_of_these_assigned_to = results.getInt("id");
        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " SET catchment_area=" + results.getInt("id") + " WHERE stop_id=" + results.getInt("stop_id") + ";";
        System.out.println(query);
        c.createStatement().executeUpdate(query);
        last_one_seen = results.getInt("stop_id");
        } else { // this is not the first time we've seen it, so we need to add more rows
        query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " ( SELECT the_geom, stop_id, stop_name, stop_desc, stop_lat, stop_lon, zone_id, stop_url," + results.getInt("id") + " FROM " + author + "." + scenarioName + DefaultConstants.GTFS_STOPS_SUFFIX + " WHERE stop_id=" + results.getInt("stop_id") + " AND catchment_area=" + first_one_of_these_assigned_to + ");";
        System.out.println(query);
        c.createStatement().executeUpdate(query);
        //last_one_seen=results.getInt("stop_id");
        }
        
        
        last_one_seen = results.getInt("stop_id");
        }
         */
        // Create POD buffers for all PODs with status='true'

        query = "SELECT pods.catchment_area AS pod, ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM( pods.location, 32138), " + dw + "),4326) AS coverage_wo_respect_ca INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + " FROM " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pods WHERE pods.status='true';";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + " ADD COLUMN clipped_coverage geometry;";
        System.out.println(query);
        c.createStatement().executeUpdate(query);


        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + " AS cov "
                + " SET  clipped_coverage = ST_INTERSECTION(cov.coverage_wo_respect_ca, cat.the_geom)  "
                + " FROM " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat WHERE  cat.id=cov.pod;";
        System.out.println(query);
        c.createStatement().executeUpdate(query);






        query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + " ADD COLUMN cen_cov geometry;";
        System.out.println(query);
        c.createStatement().executeUpdate(query);


        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + " AS cov "
                + "SET cen_cov=temp.the_geom "
                + "FROM ("
                + "SELECT pod, ST_TRANSFORM(ST_MULTI(ST_UNION(the_geom)),4326) AS the_geom "
                + "FROM ("
                + "SELECT cen.logrecno AS logrecno, cov.pod AS pod, blocks.the_geom AS the_geom "
                + "FROM " + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + " AS cov, "
                + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks "
                + "WHERE ST_WITHIN(ST_TRANSFORM(cen.centroid, 32138),ST_TRANSFORM(cov.clipped_coverage,32138)) "
                + "AND blocks.logrecno=cen.logrecno) AS cen_cov GROUP BY pod ) AS temp "
                + "WHERE cov.pod=temp.pod;  ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);



        query = "SELECT cen_cov AS the_geom, pod INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_DISPLAY_SUFFIX + " FROM " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + ";";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "SELECT clipped_coverage AS the_geom, pod INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_WO_TRANS_DISPLAY_SUFFIX + " FROM " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX + ";";
        System.out.println(query);
        c.createStatement().executeUpdate(query);
        // If I create coverage respecting population blocks in a separate field of the coverage table, I can toggle between them by re-assigning values to the coverage display table and refreshing the map

        // For each POD with status = 'true'

        // - determine distance to closest transit stop in CA

        // - Create stop buffers

        // - Union POD and stop buffers

        // - Clip unioned buffer by CA

    }

    public static void maximizeReach(double dw) throws SQLException, CQLException {
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();



        if (!REPLAN.getQueries().columnExists(author, scenarioName + DefaultConstants.POD_SUFFIX, "catchment_area", c)) {
            String create_column_query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " ADD COLUMN catchment_area integer;";
            System.out.println(create_column_query);
            c.createStatement().executeUpdate(create_column_query);
        }



        String query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET  catchment_area=ca.id "
                + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
                + "WHERE  ST_WITHIN(pod.location,ca.the_geom); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);


        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET status = 'false'";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        if (!REPLAN.getQueries().tableExists(author, scenarioName + DefaultConstants.REACH_COMPARISONS, REPLAN.getController().getConnection())) {
            query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " (catchment_area integer, pod_id integer, reach integer, with_transit boolean, x numeric);";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }

        query = "SELECT max(id) AS num_catchments FROM " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + ";";
        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();
        int numCatchments = results.getInt("num_catchments");

        for (int i = 1; i <= numCatchments; i++) {
            int max_facility = -999;
            int max_coverage = -1;

            // Get list of PODs in this CA
            query = "SELECT id FROM " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " WHERE catchment_area=" + i + ";";
            System.out.println(query);
            results = c.createStatement().executeQuery(query);
            LinkedList podsInCA = new LinkedList();
            while (results.next()) {
                podsInCA.add(results.getInt("id"));
            }

            for (int j = 0; j < podsInCA.size(); j++) {
                System.out.println("dw: " + dw + "  CA: " + i + "  POD id: " + podsInCA.get(j) + "  Coverage: " + getReach((Integer) podsInCA.get(j), dw));
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + getReach((Integer) podsInCA.get(j), dw) + ", 'false', 0);";
                System.out.println(query);
                c.createStatement().executeUpdate(query);
                if (getReach((Integer) podsInCA.get(j), dw) > max_coverage) {
                    max_facility = (Integer) podsInCA.get(j);
                    max_coverage = getReach((Integer) podsInCA.get(j), dw);
                }
            }
            query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " SET status='true' WHERE id=" + max_facility + ";";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }
        calculateCoverageAreas(dw);


// add coverage layer to map

        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_DISPLAY_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x0000ff),
                4), "Coverage Blocks without Transit");

        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_WO_TRANS_DISPLAY_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x0000ff),
                4), "Coverage Buffer without Transit");

        ClassifyPopulationBlocks.classifyPopBlocksAfter(author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX, scenarioName + DefaultConstants.VULN_AFTER_COVERAGE_AREA_WO_TRANS_SUFFIX, author, "Transportation Vulnerable Population After Maximization without Transit", "cen_cov", "class_after_wo_trans");
        //ClassifyPopulationBlocks.classifyPopBlocksAfter(author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_WO_TRANS_SUFFIX, scenarioName + DefaultConstants.VULN_AFTER_COVERAGE_AREA_WO_TRANS_SUFFIX,author, "Transportation Vulnerable Population After Maximization without Transit");

        query = "SELECT sum(reach) AS total_reach FROM " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " AS reach JOIN " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pods ON reach.pod_id=pods.id WHERE pods.status='true';";
        System.out.println(query);
        results = c.createStatement().executeQuery(query);
        results.next(); // prime for first use
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        System.out.println("maximizeReach(double dw) -- total reach of vulnerable individuals: " + results.getInt("total_reach"));
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    private static int getReach(int pod_id, double dw) throws SQLException {
        // Review this method to make sure I'm only grabbing blocks within the
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();
        String query = "SELECT "
                + "SUM(cen.total_none) AS coverage "
                + "FROM (" //+ author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS cen, "
                + "SELECT block.* "
                + "FROM "
                + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS block, "
                + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat, "
                + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "WHERE pod.id=" + pod_id + " "
                + "AND cat.id=pod.catchment_area "
                + "AND ST_WITHIN(ST_TRANSFORM(block.centroid, 32138),"
                + "ST_TRANSFORM(cat.the_geom, 32138))"
                + ") AS cen, "
                + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "WHERE "
                + "pod.id=" + pod_id + " AND "
                + "ST_DISTANCE(ST_TRANSFORM(cen.centroid,32138),ST_TRANSFORM(pod.location,32138))<" + dw + ";";


        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();

        return results.getInt("coverage");
    }

    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    public static void maximizeReach_add_transit_to_POD2(double dw, double x) throws SQLException, CQLException {
        // needs modifications to enable usage of this method along with the maximization with transit method
        // the problem lies in naming layer names we are adding to the map

        double dw_m_x;//= dw - x;
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();

        if (!REPLAN.getQueries().columnExists(author, scenarioName + DefaultConstants.POD_SUFFIX, "catchment_area", c)) {
            String create_column_query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " ADD COLUMN catchment_area integer;";
            System.out.println(create_column_query);
            c.createStatement().executeUpdate(create_column_query);
        }



        String query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET  catchment_area=ca.id "
                + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
                + "WHERE  ST_WITHIN(pod.location,ca.the_geom); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET status = 'false'";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "SELECT max(id) AS num_catchments FROM " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + ";";
        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();
        int numCatchments = results.getInt("num_catchments");

        query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " (the_geom geometry, reach integer, catchment_area integer);";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " (the_geom geometry, reach integer, catchment_area integer);";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        if (!REPLAN.getQueries().tableExists(author, scenarioName + DefaultConstants.REACH_COMPARISONS, REPLAN.getController().getConnection())) {
            query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " (catchment_area integer, pod_id integer, reach integer, with_transit boolean, x numeric);";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }

        for (int i = 1; i <= numCatchments; i++) {


            // Get list of PODs in this CA
            query = "SELECT id FROM " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " WHERE catchment_area=" + i + ";";
            System.out.println(query);
            results = c.createStatement().executeQuery(query);
            LinkedList podsInCA = new LinkedList();
            while (results.next()) {
                podsInCA.add(results.getInt("id"));
            }

            // for each POD in each catchment area ***
            // Get the distance x of the closes transit stop
            // create dw buffer around POD
            // create dw-x buffers around transit stops in this CA
            // UNION all buffers to create coverage
            // CLIP all buffers by CA
            // Create region based blocks whose centroids are within buffer
            // Calculate reach based on this buffer
            // If reach > max_reach,
            //   save buffer record
            //   update max_facility and max_coverage
            int max_facility = i; // If nobody has any reach, we leave the facility the same
            int max_reach = -1;
            double max_facility_dw_m_x = 0;
            //double dw_m_x = 0;
            for (int j = 0; j < podsInCA.size(); j++) {


                // 000000000000000000000000000000000000000000000000000000000
                // there is a problem in this section of code somewhere!
                query = "SELECT stop.stop_id AS stop_id, "
                        + "cat.id AS catchment_area, "
                        + "ST_DISTANCE(ST_TRANSFORM(pod.location,32138),ST_TRANSFORM(stop.the_geom,32138)) AS distance "
                        + "FROM martyo.tarrant_gtfs_stops AS stop, "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat, "
                        //+ "martyo.workingcpy_mbigexperiment_catchment AS cat, "
                        + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                        //+ "martyo.workingcpy_mbigexperiment_pods AS pod "
                        + "WHERE pod.id=" + podsInCA.get(j) + " AND "
                        + "ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) "
                        + "AND cat.id=" + i + " "
                        + "ORDER BY distance "
                        + "LIMIT 1;";
                System.out.println(query);
                results = c.createStatement().executeQuery(query);

                if (results.next()) {// prime for first use
                    System.out.println("CA: " + i + "  POD: " + podsInCA.get(j) + "  x: " + results.getDouble("distance") + "  stop_id: " + results.getInt("stop_id"));
                    double measured_x = results.getDouble("distance");
                    if (measured_x < x) {
                        dw_m_x = (double) dw - measured_x;
                    } else {
                        dw_m_x = dw - x;
                    }
                    if (dw_m_x < 0) {
                        dw_m_x = 0;
                    }

                } else { // no stops exist in this CA
                    System.out.println("****************************************");
                    System.out.println("i=" + i + "  j=" + j);
                    System.out.println("****************************************");
                    x = -999;
                    dw_m_x = 0;
                }

                // 000000000000000000000000000000000000000000000000000000000



                if (dw_m_x > 0) {
                    query = "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                            + "sum(blocks.total_none) AS reach, "
                            + i + " AS catchment_area "
                            //+ "INTO martyo.test18w "
                            + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                            + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                            + "( SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                            + i + " AS catchment_area "
                            + "FROM "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                            + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                            + "stop_buffer.catchment_area AS catchment_area "
                            + "FROM "
                            + "( SELECT  stop_buffers.id AS catchment_area, "
                            + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                            + "FROM "
                            + "( SELECT cat.id AS id,    "
                            + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                            + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                            + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                            + "cat.id=" + i + " "
                            + ") AS stop_buffers "
                            + "GROUP BY stop_buffers.id "
                            + ") AS stop_buffer, "
                            + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                            + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                            + "WHERE pod.id= " + podsInCA.get(j) + " "
                            + ") AS pod_buffer  "
                            + ") AS buffer  "
                            + "WHERE  cat.id= " + i + " "
                            + ") AS clipped_buffer "
                            + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                            + "cen.logrecno=blocks.logrecno  "
                            + "GROUP BY catchment_area ;";
                } else {
                    query = "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                            + "sum(blocks.total_none) AS reach, "
                            + i + " AS catchment_area "
                            //+ "INTO martyo.test18w "
                            + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                            + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                            + "( SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                            + i + " AS catchment_area "
                            + "FROM "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                            //+ "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                            //+ "stop_buffer.catchment_area AS catchment_area "
                            //+ "FROM "
                            /* + "( SELECT  stop_buffers.id AS catchment_area, "
                            + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                            + "FROM "
                            + "( SELECT cat.id AS id,    "
                            + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                            + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                            + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                            + "cat.id=" + i + " "
                            + ") AS stop_buffers "
                            + "GROUP BY stop_buffers.id "
                            + ") AS stop_buffer, "*/
                            + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                            + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                            + "WHERE pod.id= " + podsInCA.get(j) + " "
                            // + ") AS pod_buffer  "
                            + ") AS buffer  "
                            + "WHERE  cat.id= " + i + " "
                            + ") AS clipped_buffer "
                            + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                            + "cen.logrecno=blocks.logrecno  "
                            + "GROUP BY catchment_area ;";
                    System.out.println("else version");
                }
                System.out.println(query);
                results = c.createStatement().executeQuery(query);
                if (results.next()) { // if we reached anyone
                    System.out.println("CA: " + i + "   POD: " + podsInCA.get(j) + "   reach: " + results.getInt("reach"));
                    query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + results.getInt("reach") + ", 'true', " + x + ");";
                    System.out.println(query);
                    c.createStatement().executeUpdate(query);
                    if (results.getInt("reach") > max_reach) {
                        max_reach = results.getInt("reach");

                        max_facility = (Integer) podsInCA.get(j);
                        max_facility_dw_m_x = dw_m_x;
                    }
                } else {
                    System.out.println("No blocks were within the buffer. Therefore, POD " + (Integer) podsInCA.get(j) + " has a reach of 0.");
                    query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + "0" + ", 'true', " + x + ");";
                    System.out.println(query);
                    c.createStatement().executeUpdate(query);

                }

                //  System.out.println("dw: " + dw + "  CA: " + i + "  POD id: " + podsInCA.get(j) + "  Coverage: " + getReach((Integer) podsInCA.get(j), dw));
                //  if (getReach((Integer) podsInCA.get(j), dw) > max_coverage) {
                //      max_facility = (Integer) podsInCA.get(j);
                //      max_coverage = getReach((Integer) podsInCA.get(j), dw);
                //  }
            }
            if (max_facility == -999) {// if none of the facilities had any reach, just choose the original facility
                max_facility = i;
            }
            query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " SET status='true' WHERE id=" + max_facility + ";";
            System.out.println(query);
            c.createStatement().executeUpdate(query);


// create coverage blocks
            if (max_facility_dw_m_x > 0) {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " "
                        + "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        + "sum(blocks.total_none) AS reach, "
                        + i + " AS catchment_area "
                        //+ "INTO martyo.test18w "
                        + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        + "( SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        + "stop_buffer.catchment_area AS catchment_area "
                        + "FROM "
                        + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + " "
                        + ") AS clipped_buffer "
                        + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                        + "cen.logrecno=blocks.logrecno  "
                        + "GROUP BY catchment_area ;";
            } else {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " "
                        + "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        + "sum(blocks.total_none) AS reach, "
                        + i + " AS catchment_area "
                        //+ "INTO martyo.test18w "
                        + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        + "( SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        //+ "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        //+ "stop_buffer.catchment_area AS catchment_area "
                        //+ "FROM "
                        /* + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "*/
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        // + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + " "
                        + ") AS clipped_buffer "
                        + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                        + "cen.logrecno=blocks.logrecno  "
                        + "GROUP BY catchment_area ;";
            }
            System.out.println(query);
            c.createStatement().executeUpdate(query);


            // create coverage buffer
            if (max_facility_dw_m_x > 0) {
                query = //"INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        //+ "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        //+ "sum(blocks.total_none) AS reach, "
                        //+ i + " AS catchment_area "
                        //+ "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        //+ author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        //+ "(
                        "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        //+ "INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        + "stop_buffer.catchment_area AS catchment_area "
                        + "FROM "
                        + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + "; ";
            } else {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        //+ "INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        // + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        //+ "stop_buffer.catchment_area AS catchment_area "
                        // + "FROM "
                        // + "( SELECT  stop_buffers.id AS catchment_area, "
                        // + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        // + "FROM "
                        // + "( SELECT cat.id AS id,    "
                        // + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        // + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        // + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        // + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        // + "cat.id=" + i + " "
                        // + ") AS stop_buffers "
                        // + "GROUP BY stop_buffers.id "
                        // + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        // + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + "; ";
            }
            //+ ") AS clipped_buffer "
            //+ "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
            //+ "cen.logrecno=blocks.logrecno  "
            //+ "GROUP BY catchment_area ;";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }
        //calculateCoverageAreas(dw);


// add coverage layer to map

        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x00ff00),
                4), "Coverage Blocks with Transit Adding new Stop " + x + " meters from each chosen POD");


        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x00ff00),
                4), "Coverage Buffer with Transit Adding new Stop " + x + " meters from each chosen POD");

        ClassifyPopulationBlocks.classifyPopBlocksAfter(author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX, scenarioName + DefaultConstants.VULN_AFTER_COVERAGE_AREA_W_TRANS_SUFFIX, author, "Transportation Vulnerable Population After Maximization with Transit", "the_geom", "class_after_w_trans");

    }

    public static void maximizeReach_transit(double dw) throws SQLException, CQLException {
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();

        if (!REPLAN.getQueries().columnExists(author, scenarioName + DefaultConstants.POD_SUFFIX, "catchment_area", c)) {
            String create_column_query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " ADD COLUMN catchment_area integer;";
            System.out.println(create_column_query);
            c.createStatement().executeUpdate(create_column_query);
        }



        String query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET  catchment_area=ca.id "
                + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
                + "WHERE  ST_WITHIN(pod.location,ca.the_geom); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET status = 'false'";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "SELECT max(id) AS num_catchments FROM " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + ";";
        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();
        int numCatchments = results.getInt("num_catchments");

        query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " (the_geom geometry, reach integer, catchment_area integer);";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " (the_geom geometry, reach integer, catchment_area integer);";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        if (!REPLAN.getQueries().tableExists(author, scenarioName + DefaultConstants.REACH_COMPARISONS, REPLAN.getController().getConnection())) {
            query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " (catchment_area integer, pod_id integer, reach integer, with_transit boolean, x numeric);";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }

        for (int i = 1; i <= numCatchments; i++) {


            // Get list of PODs in this CA
            query = "SELECT id FROM " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " WHERE catchment_area=" + i + ";";
            System.out.println(query);
            results = c.createStatement().executeQuery(query);
            LinkedList podsInCA = new LinkedList();
            while (results.next()) {
                podsInCA.add(results.getInt("id"));
            }

            // for each POD in each catchment area ***
            // Get the distance x of the closes transit stop
            // create dw buffer around POD
            // create dw-x buffers around transit stops in this CA
            // UNION all buffers to create coverage
            // CLIP all buffers by CA
            // Create region based blocks whose centroids are within buffer
            // Calculate reach based on this buffer
            // If reach > max_reach,
            //   save buffer record
            //   update max_facility and max_coverage
            int max_facility = i; // If nobody has any reach, we leave the facility the same
            int max_reach = -1;
            double max_facility_dw_m_x = 0;
            double dw_m_x = 0;
            for (int j = 0; j < podsInCA.size(); j++) {
                double x = 0;
                //  double dw_m_x = 0;
                query = "SELECT stop.stop_id AS stop_id, "
                        + "cat.id AS catchment_area, "
                        + "ST_DISTANCE(ST_TRANSFORM(pod.location,32138),ST_TRANSFORM(stop.the_geom,32138)) AS distance "
                        + "FROM martyo.tarrant_gtfs_stops AS stop, "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat, "
                        //+ "martyo.workingcpy_mbigexperiment_catchment AS cat, "
                        + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                        //+ "martyo.workingcpy_mbigexperiment_pods AS pod "
                        + "WHERE pod.id=" + podsInCA.get(j) + " AND "
                        + "ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) "
                        + "AND cat.id=" + i + " "
                        + "ORDER BY distance "
                        + "LIMIT 1;";
                System.out.println(query);
                results = c.createStatement().executeQuery(query);

                if (results.next()) {// prime for first use
                    System.out.println("CA: " + i + "  POD: " + podsInCA.get(j) + "  x: " + results.getDouble("distance") + "  stop_id: " + results.getInt("stop_id"));
                    x = results.getDouble("distance");
                    dw_m_x = (double) dw - x;
                    if (dw_m_x < 0) {
                        dw_m_x = 0;
                    }

                } else { // no stops exist in this CA
                    System.out.println("****************************************");
                    System.out.println("i=" + i + "  j=" + j);
                    System.out.println("****************************************");
                    x = -999;
                    dw_m_x = 0;
                }

                if (dw_m_x > 0) {
                    query = "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                            + "sum(blocks.total_none) AS reach, "
                            + i + " AS catchment_area "
                            //+ "INTO martyo.test18w "
                            + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                            + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                            + "( SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                            + i + " AS catchment_area "
                            + "FROM "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                            + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                            + "stop_buffer.catchment_area AS catchment_area "
                            + "FROM "
                            + "( SELECT  stop_buffers.id AS catchment_area, "
                            + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                            + "FROM "
                            + "( SELECT cat.id AS id,    "
                            + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                            + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                            + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                            + "cat.id=" + i + " "
                            + ") AS stop_buffers "
                            + "GROUP BY stop_buffers.id "
                            + ") AS stop_buffer, "
                            + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                            + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                            + "WHERE pod.id= " + podsInCA.get(j) + " "
                            + ") AS pod_buffer  "
                            + ") AS buffer  "
                            + "WHERE  cat.id= " + i + " "
                            + ") AS clipped_buffer "
                            + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                            + "cen.logrecno=blocks.logrecno  "
                            + "GROUP BY catchment_area ;";
                } else {
                    query = "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                            + "sum(blocks.total_none) AS reach, "
                            + i + " AS catchment_area "
                            //+ "INTO martyo.test18w "
                            + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                            + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                            + "( SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                            + i + " AS catchment_area "
                            + "FROM "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                            //+ "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                            //+ "stop_buffer.catchment_area AS catchment_area "
                            //+ "FROM "
                            /* + "( SELECT  stop_buffers.id AS catchment_area, "
                            + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                            + "FROM "
                            + "( SELECT cat.id AS id,    "
                            + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                            + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                            + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                            + "cat.id=" + i + " "
                            + ") AS stop_buffers "
                            + "GROUP BY stop_buffers.id "
                            + ") AS stop_buffer, "*/
                            + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                            + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                            + "WHERE pod.id= " + podsInCA.get(j) + " "
                            // + ") AS pod_buffer  "
                            + ") AS buffer  "
                            + "WHERE  cat.id= " + i + " "
                            + ") AS clipped_buffer "
                            + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                            + "cen.logrecno=blocks.logrecno  "
                            + "GROUP BY catchment_area ;";
                    System.out.println("else version");
                }
                System.out.println(query);
                results = c.createStatement().executeQuery(query);
                if (results.next()) { // if we reached anyone
                    System.out.println("CA: " + i + "   POD: " + podsInCA.get(j) + "   reach: " + results.getInt("reach"));
                    query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + results.getInt("reach") + ", 'true', " + x + ");";
                    System.out.println(query);
                    c.createStatement().executeUpdate(query);
                    if (results.getInt("reach") > max_reach) {
                        max_reach = results.getInt("reach");

                        max_facility = (Integer) podsInCA.get(j);
                        max_facility_dw_m_x = dw_m_x;
                    }
                } else {
                    System.out.println("No blocks were within the buffer. Therefore, POD " + (Integer) podsInCA.get(j) + " has a reach of 0.");
                    query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + "0" + ", 'true', " + x + ");";
                    System.out.println(query);
                    c.createStatement().executeUpdate(query);

                }

                //  System.out.println("dw: " + dw + "  CA: " + i + "  POD id: " + podsInCA.get(j) + "  Coverage: " + getReach((Integer) podsInCA.get(j), dw));
                //  if (getReach((Integer) podsInCA.get(j), dw) > max_coverage) {
                //      max_facility = (Integer) podsInCA.get(j);
                //      max_coverage = getReach((Integer) podsInCA.get(j), dw);
                //  }
            }
            if (max_facility == -999) {// if none of the facilities had any reach, just choose the original facility
                max_facility = i;
            }
            query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " SET status='true' WHERE id=" + max_facility + ";";
            System.out.println(query);
            c.createStatement().executeUpdate(query);


// create coverage blocks
            if (max_facility_dw_m_x > 0) {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " "
                        + "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        + "sum(blocks.total_none) AS reach, "
                        + i + " AS catchment_area "
                        //+ "INTO martyo.test18w "
                        + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        + "( SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        + "stop_buffer.catchment_area AS catchment_area "
                        + "FROM "
                        + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + " "
                        + ") AS clipped_buffer "
                        + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                        + "cen.logrecno=blocks.logrecno  "
                        + "GROUP BY catchment_area ;";
            } else {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " "
                        + "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        + "sum(blocks.total_none) AS reach, "
                        + i + " AS catchment_area "
                        //+ "INTO martyo.test18w "
                        + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        + "( SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        //+ "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        //+ "stop_buffer.catchment_area AS catchment_area "
                        //+ "FROM "
                        /* + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "*/
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        // + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + " "
                        + ") AS clipped_buffer "
                        + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                        + "cen.logrecno=blocks.logrecno  "
                        + "GROUP BY catchment_area ;";
            }
            System.out.println(query);
            c.createStatement().executeUpdate(query);


            // create coverage buffer
            if (max_facility_dw_m_x > 0) {
                query = //"INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        //+ "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        //+ "sum(blocks.total_none) AS reach, "
                        //+ i + " AS catchment_area "
                        //+ "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        //+ author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        //+ "(
                        "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        //+ "INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        + "stop_buffer.catchment_area AS catchment_area "
                        + "FROM "
                        + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + "; ";
            } else {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        //+ "INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        // + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        //+ "stop_buffer.catchment_area AS catchment_area "
                        // + "FROM "
                        // + "( SELECT  stop_buffers.id AS catchment_area, "
                        // + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        // + "FROM "
                        // + "( SELECT cat.id AS id,    "
                        // + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        // + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        // + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        // + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        // + "cat.id=" + i + " "
                        // + ") AS stop_buffers "
                        // + "GROUP BY stop_buffers.id "
                        // + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        // + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + "; ";
            }
            //+ ") AS clipped_buffer "
            //+ "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
            //+ "cen.logrecno=blocks.logrecno  "
            //+ "GROUP BY catchment_area ;";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }
        //calculateCoverageAreas(dw);


// add coverage layer to map

        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x00ff00),
                4), "Coverage Blocks with Transit");


        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x00ff00),
                4), "Coverage Buffer with Transit");

        ClassifyPopulationBlocks.classifyPopBlocksAfter(author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX, scenarioName + DefaultConstants.VULN_AFTER_COVERAGE_AREA_W_TRANS_SUFFIX, author, "Transportation Vulnerable Population After Maximization with Transit", "the_geom", "class_after_w_trans");

        query = "SELECT sum(reach) AS total_reach FROM " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " AS reach JOIN " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pods ON reach.pod_id=pods.id WHERE pods.status='true';";
        System.out.println(query);
        results = c.createStatement().executeQuery(query);
        results.next(); // prime for first use
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        System.out.println("maximizeReach_transit(double dw) -- total reach of vulnerable individuals: " + results.getInt("total_reach"));
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    // pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
    public static void maximizeReach_add_transit_to_POD(double dw, double dist_added_trans_to_POD) throws SQLException, CQLException {
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();

// ******************************************
// Make sure the catchment_area column in the POD table exists and is updated
        if (!REPLAN.getQueries().columnExists(author, scenarioName + DefaultConstants.POD_SUFFIX, "catchment_area", c)) {
            String create_column_query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " ADD COLUMN catchment_area integer;";
            System.out.println(create_column_query);
            c.createStatement().executeUpdate(create_column_query);
        }

        String query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET  catchment_area=ca.id "
                + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
                + "WHERE  ST_WITHIN(pod.location,ca.the_geom); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);
// ******************************************

// ******************************************
        // Turn all PODs off in preparation for maximization algorithm
        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET status = 'false'";
        System.out.println(query);
        c.createStatement().executeUpdate(query);
// ******************************************


        // ******************************************
        // get number of catchment areas in current scenario
// In the future, it may be a good idea to select the count of distinct id's rather than the max
        query = "SELECT max(id) AS num_catchments FROM " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + ";";
        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();
        int numCatchments = results.getInt("num_catchments");
// ******************************************

        // ******************************************
        // create tables to store results
        query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " (the_geom geometry, reach integer, catchment_area integer);";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " (the_geom geometry, reach integer, catchment_area integer);";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        if (!REPLAN.getQueries().tableExists(author, scenarioName + DefaultConstants.REACH_COMPARISONS, REPLAN.getController().getConnection())) {
            query = "CREATE TABLE " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " (catchment_area integer, pod_id integer, reach integer, with_transit boolean, x numeric, dw_m_x numeric);";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }
        // ******************************************



        for (int i = 1; i <= numCatchments; i++) {

            Boolean stops_exist_in_this_CA = false;
// ******************************************
            // Get list of PODs in this CA
            query = "SELECT id FROM " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " WHERE catchment_area=" + i + ";";
            System.out.println(query);
            results = c.createStatement().executeQuery(query);
            LinkedList podsInCA = new LinkedList();
            while (results.next()) {
                podsInCA.add(results.getInt("id"));
            }
            // ******************************************

            // for each POD in each catchment area ***
            // Get the distance x of the closes transit stop
            // create dw buffer around POD
            // create dw-x buffers around transit stops in this CA
            // UNION all buffers to create coverage
            // CLIP all buffers by CA
            // Create region based blocks whose centroids are within buffer
            // Calculate reach based on this buffer
            // If reach > max_reach,
            //   save buffer record
            //   update max_facility and max_coverage
            int max_facility = i; // If nobody has any reach, we leave the facility the same
            int max_reach = -1;
            double max_facility_dw_m_x = 0;
            double dw_m_x = 0;
            for (int j = 0; j < podsInCA.size(); j++) {
                double x = 0;
                //  double dw_m_x = 0;
                query = "SELECT stop.stop_id AS stop_id, "
                        + "cat.id AS catchment_area, "
                        + "ST_DISTANCE(ST_TRANSFORM(pod.location,32138),ST_TRANSFORM(stop.the_geom,32138)) AS distance "
                        + "FROM martyo.tarrant_gtfs_stops AS stop, "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat, "
                        //+ "martyo.workingcpy_mbigexperiment_catchment AS cat, "
                        + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                        //+ "martyo.workingcpy_mbigexperiment_pods AS pod "
                        + "WHERE pod.id=" + podsInCA.get(j) + " AND "
                        + "ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) "
                        + "AND cat.id=" + i + " "
                        + "ORDER BY distance "
                        + "LIMIT 1;";
                System.out.println(query);
                results = c.createStatement().executeQuery(query);

                if (results.next()) {// prime for first use
                    stops_exist_in_this_CA = true;
                    System.out.println("CA: " + i + "  POD: " + podsInCA.get(j) + "  x: " + results.getDouble("distance") + "  stop_id: " + results.getInt("stop_id"));
                    x = results.getDouble("distance");
                    if (x < dist_added_trans_to_POD) {
                        dw_m_x = (double) dw - x;
                    } else {
                        dw_m_x = (double) dw - dist_added_trans_to_POD;
                    }
                    //dw_m_x = (double) dw - x;
                    if (dw_m_x < 0) {
                        dw_m_x = 0;
                    }

                } else { // no stops exist in this CA
                    stops_exist_in_this_CA = false;
                    System.out.println("****************************************");
                    System.out.println("i=" + i + "  j=" + j);
                    System.out.println("****************************************");
                    x = -999;
                    //dw_m_x = 0;
                    dw_m_x = (double) dw - dist_added_trans_to_POD;
                    if (dw_m_x < 0) {
                        dw_m_x = 0;
                    }
                }

                if (dw_m_x > 0 && stops_exist_in_this_CA) {
                    query = "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                            + "sum(blocks.total_none) AS reach, "
                            + i + " AS catchment_area "
                            //+ "INTO martyo.test18w "
                            + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                            + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                            + "( SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                            + i + " AS catchment_area "
                            + "FROM "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                            + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                            + "stop_buffer.catchment_area AS catchment_area "
                            + "FROM "
                            + "( SELECT  stop_buffers.id AS catchment_area, "
                            + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                            + "FROM "
                            + "( SELECT cat.id AS id,    "
                            + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                            + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                            + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                            + "cat.id=" + i + " "
                            + ") AS stop_buffers "
                            + "GROUP BY stop_buffers.id "
                            + ") AS stop_buffer, "
                            + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                            + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                            + "WHERE pod.id= " + podsInCA.get(j) + " "
                            + ") AS pod_buffer  "
                            + ") AS buffer  "
                            + "WHERE  cat.id= " + i + " "
                            + ") AS clipped_buffer "
                            + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                            + "cen.logrecno=blocks.logrecno  "
                            + "GROUP BY catchment_area ;";
                } else {
                    query = "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                            + "sum(blocks.total_none) AS reach, "
                            + i + " AS catchment_area "
                            //+ "INTO martyo.test18w "
                            + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                            + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                            + "( SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                            + i + " AS catchment_area "
                            + "FROM "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                            //+ "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                            //+ "stop_buffer.catchment_area AS catchment_area "
                            //+ "FROM "
                            /* + "( SELECT  stop_buffers.id AS catchment_area, "
                            + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                            + "FROM "
                            + "( SELECT cat.id AS id,    "
                            + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                            + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                            + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                            + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                            + "cat.id=" + i + " "
                            + ") AS stop_buffers "
                            + "GROUP BY stop_buffers.id "
                            + ") AS stop_buffer, "*/
                            + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                            + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                            + "WHERE pod.id= " + podsInCA.get(j) + " "
                            // + ") AS pod_buffer  "
                            + ") AS buffer  "
                            + "WHERE  cat.id= " + i + " "
                            + ") AS clipped_buffer "
                            + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                            + "cen.logrecno=blocks.logrecno  "
                            + "GROUP BY catchment_area ;";
                    System.out.println("else version");
                }
                System.out.println(query);
                results = c.createStatement().executeQuery(query);
                if (results.next()) { // if we reached anyone
                    System.out.println("CA: " + i + "   POD: " + podsInCA.get(j) + "   reach: " + results.getInt("reach"));
                    query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + results.getInt("reach") + ", 'true', " + x + ", " + dw_m_x + " );";
                    System.out.println(query);
                    c.createStatement().executeUpdate(query);
                    if (results.getInt("reach") > max_reach) {
                        max_reach = results.getInt("reach");

                        max_facility = (Integer) podsInCA.get(j);
                        max_facility_dw_m_x = dw_m_x;
                    }
                } else {
                    System.out.println("No blocks were within the buffer. Therefore, POD " + (Integer) podsInCA.get(j) + " has a reach of 0.");
                    query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " VALUES (" + i + ", " + podsInCA.get(j) + ", " + "0" + ", 'true', " + x + ", " + dw_m_x + ");";
                    System.out.println(query);
                    c.createStatement().executeUpdate(query);

                }

                //  System.out.println("dw: " + dw + "  CA: " + i + "  POD id: " + podsInCA.get(j) + "  Coverage: " + getReach((Integer) podsInCA.get(j), dw));
                //  if (getReach((Integer) podsInCA.get(j), dw) > max_coverage) {
                //      max_facility = (Integer) podsInCA.get(j);
                //      max_coverage = getReach((Integer) podsInCA.get(j), dw);
                //  }
            }
            if (max_facility == -999) {// if none of the facilities had any reach, just choose the original facility
                max_facility = i;
            }
            query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " SET status='true' WHERE id=" + max_facility + ";";
            System.out.println(query);
            c.createStatement().executeUpdate(query);


// create coverage blocks
            if (max_facility_dw_m_x > 0) {
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " "
                        + "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        + "sum(blocks.total_none) AS reach, "
                        + i + " AS catchment_area "
                        //+ "INTO martyo.test18w "
                        + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        + "( SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        + "stop_buffer.catchment_area AS catchment_area "
                        + "FROM "
                        + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + " "
                        + ") AS clipped_buffer "
                        + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                        + "cen.logrecno=blocks.logrecno  "
                        + "GROUP BY catchment_area ;";
            } else { // We should only get here if dw <= dist_added_trans_to_POD and x >= dw
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " "
                        + "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        + "sum(blocks.total_none) AS reach, "
                        + i + " AS catchment_area "
                        //+ "INTO martyo.test18w "
                        + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        + author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        + "( SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        //+ "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        //+ "stop_buffer.catchment_area AS catchment_area "
                        //+ "FROM "
                        /* + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "*/
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        // + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + " "
                        + ") AS clipped_buffer "
                        + "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
                        + "cen.logrecno=blocks.logrecno  "
                        + "GROUP BY catchment_area ;";
            }
            System.out.println(query);
            c.createStatement().executeUpdate(query);


            // create coverage buffer
            if (max_facility_dw_m_x > 0) {
                query = //"INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        //+ "SELECT  ST_MULTI(ST_UNION(blocks.the_geom)) AS the_geom, "
                        //+ "sum(blocks.total_none) AS reach, "
                        //+ i + " AS catchment_area "
                        //+ "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS blocks,  "
                        //+ author + "." + scenarioName + DefaultConstants.CENTROID_SUFFIX + " AS cen, "
                        //+ "(
                        "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "SELECT ST_INTERSECTION(buffer.singlegeom, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        //+ "INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        + "stop_buffer.catchment_area AS catchment_area "
                        + "FROM "
                        + "( SELECT  stop_buffers.id AS catchment_area, "
                        + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        + "FROM "
                        + "( SELECT cat.id AS id,    "
                        + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        + "cat.id=" + i + " "
                        + ") AS stop_buffers "
                        + "GROUP BY stop_buffers.id "
                        + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + "; ";
            } else { // We should only get here if dw <= dist_added_trans_to_POD and x >= dw
                query = "INSERT INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "SELECT ST_INTERSECTION(buffer.pod_buff, cat.the_geom) AS coverage_area, "
                        + i + " AS catchment_area "
                        //+ "INTO " + author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX + " "
                        + "FROM "
                        + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat,  "
                        // + "(SELECT ST_UNION(stop_buffer.singlegeom,pod_buffer.pod_buff) AS singlegeom, "
                        //+ "stop_buffer.catchment_area AS catchment_area "
                        // + "FROM "
                        // + "( SELECT  stop_buffers.id AS catchment_area, "
                        // + "ST_MULTI(ST_UNION(stop_buffers.the_geom)) AS singlegeom "
                        // + "FROM "
                        // + "( SELECT cat.id AS id,    "
                        // + "ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(stop.the_geom,32138)," + max_facility_dw_m_x + "),4326) AS the_geom  "
                        // + "FROM martyo.tarrant_gtfs_stops AS stop,   "
                        // + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS cat  "
                        // + "WHERE   ST_COVERS(ST_TRANSFORM(cat.the_geom, 32138), ST_TRANSFORM(stop.the_geom,32138)) AND   "
                        // + "cat.id=" + i + " "
                        // + ") AS stop_buffers "
                        // + "GROUP BY stop_buffers.id "
                        // + ") AS stop_buffer, "
                        + "( SELECT ST_TRANSFORM(ST_BUFFER(ST_TRANSFORM(pod.location,32138)," + dw + "),4326) AS pod_buff  "
                        + "FROM   " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod  "
                        + "WHERE pod.id= " + max_facility + " "
                        // + ") AS pod_buffer  "
                        + ") AS buffer  "
                        + "WHERE  cat.id= " + i + "; ";
            }
            //+ ") AS clipped_buffer "
            //+ "WHERE ST_COVERS(ST_TRANSFORM(clipped_buffer.coverage_area,32138),ST_TRANSFORM(cen.centroid,32138)) AND  "
            //+ "cen.logrecno=blocks.logrecno  "
            //+ "GROUP BY catchment_area ;";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }
        //calculateCoverageAreas(dw);


// add coverage layer to map

        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x00ff00),
                4), "Coverage Blocks with Transit No More than " + dist_added_trans_to_POD + " to POD");


        REPLAN.getMainFrame().getTabs().getSelectedScenario().createLayer(scenarioName + DefaultConstants.COVERAGE_AREA_BUFFER_W_TRANS_DISPLAY_SUFFIX,
                DefaultStyles.createSingleSymbolPolygonStyle(
                0.0,
                new Color(0x000000), //new Color(0x0868AC),
                0.5, new Color(0x00ff00),
                4), "Coverage Buffer with Transit No More than " + dist_added_trans_to_POD + " to POD");

        ClassifyPopulationBlocks.classifyPopBlocksAfter(author + "." + scenarioName + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX, scenarioName + DefaultConstants.VULN_AFTER_COVERAGE_AREA_W_TRANS_SUFFIX, author, "Transportation Vulnerable Population After Maximization with Transit", "the_geom", "class_after_w_trans");


        query = "SELECT sum(reach) AS total_reach FROM " + author + "." + scenarioName + DefaultConstants.REACH_COMPARISONS + " AS reach JOIN " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pods ON reach.pod_id=pods.id WHERE pods.status='true';";
        System.out.println(query);
        results = c.createStatement().executeQuery(query);
        results.next(); // prime for first use
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        System.out.println("maximizeReach_add_transit_to_POD(double dw) -- total reach of vulnerable individuals: " + results.getInt("total_reach"));
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    // pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
    private static int getReachWTransit(int pod_id, double dw) throws SQLException {
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();

        String query = "SELECT "
                + "SUM(cen.total_none) AS coverage "
                + "FROM " + author + "." + scenarioName + DefaultConstants.BLOCK_SUFFIX + " AS cen, "
                + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "WHERE "
                + "pod.id=" + pod_id + " AND "
                + "ST_DISTANCE(ST_TRANSFORM(cen.centroid,32138),ST_TRANSFORM(pod.location,32138))<" + dw + ";";
        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();

        return results.getInt("coverage");
    }

    public static void maximizeReachWTransit(double dw) throws SQLException {
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();
        Connection c = REPLAN.getController().getConnection();

        if (!REPLAN.getQueries().columnExists(author, scenarioName, "catchment_area", c)) {
            String create_column_query = "ALTER TABLE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " ADD COLUMN catchment_area integer;";
            System.out.println(create_column_query);
            c.createStatement().executeUpdate(create_column_query);
        }


        String query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET  catchment_area=ca.id "
                + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
                + "WHERE  ST_WITHIN(pod.location,ca.the_geom); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);


        query = "SELECT * INTO " + author + "." + scenarioName + "_tarrant_gtfs_stops FROM martyo.tarrant_gtfs_stops;";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "ALTER TABLE " + author + "." + scenarioName + "_tarrant_gtfs_stops ADD COLUMN catchment_area integer;";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "UPDATE " + author + "." + scenarioName + "_tarrant_gtfs_stops AS stop "
                + "SET  catchment_area=ca.id "
                + "FROM  " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + " AS ca "
                + "WHERE  ST_WITHIN(stop.location,ca.the_geom); ";
        System.out.println(query);
        c.createStatement().executeUpdate(query);


        // set all PODs' status to 'false'
        query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " AS pod "
                + "SET status = 'false'";
        System.out.println(query);
        c.createStatement().executeUpdate(query);

        query = "SELECT max(id) AS num_catchments FROM " + author + "." + scenarioName + DefaultConstants.CATCHMENT_SUFFIX + ";";
        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        results.next();
        int numCatchments = results.getInt("num_catchments");

        for (int i = 1; i <= numCatchments; i++) {
            int max_facility = -999;
            int max_coverage = -1;

            // Get list of PODs in this CA
            query = "SELECT id FROM " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " WHERE catchment_area=" + i + ";";
            System.out.println(query);
            results = c.createStatement().executeQuery(query);
            LinkedList podsInCA = new LinkedList();
            while (results.next()) {
                podsInCA.add(results.getInt("id"));
            }

            for (int j = 0; j < podsInCA.size(); j++) { // for each POD in this CA
                System.out.println("dw: " + dw + "  CA: " + i + "  POD id: " + podsInCA.get(j) + "  Coverage: " + getReach((Integer) podsInCA.get(j), dw));
                if (getReach((Integer) podsInCA.get(j), dw) > max_coverage) {
                    max_facility = (Integer) podsInCA.get(j);
                    max_coverage = getReach((Integer) podsInCA.get(j), dw);
                }
            }
            query = "UPDATE " + author + "." + scenarioName + DefaultConstants.POD_SUFFIX + " SET status='true' WHERE id=" + max_facility + ";";
            System.out.println(query);
            c.createStatement().executeUpdate(query);
        }
    }

    public static void reassignVulnPops(double dw) throws SQLException {
//        System.out.println("This method has not yet been implemented");
        String author = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getAuthor();
        String scenarioName = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState().getWorkingCopyName();

        String prefix = author + "." + scenarioName;
        Connection c = REPLAN.getController().getConnection();
        String query = "WITH "
                + "not_covered_centroid_distances AS(  "
                + "WITH "
                + "not_covered_blocks_centroids AS(   "
                + "WITH "
                + "covered_blocks_centroids AS(    "
                + "SELECT cen.*, cov.*    "
                + "FROM     "
                + prefix + DefaultConstants.CENTROID_SUFFIX + " AS cen,     "
                + prefix + DefaultConstants.COVERAGE_AREA_W_TRANS_SUFFIX + " AS cov    "
                + "WHERE     "
                + "ST_COVERS(ST_TRANSFORM(cov.the_geom,32138),ST_TRANSFORM(cen.centroid,32138))   "
                + ")  "
                + "SELECT * "
                + "FROM " + prefix + DefaultConstants.CENTROID_SUFFIX + "  "
                + "WHERE "
                + "logrecno not in "
                + "(SELECT logrecno FROM covered_blocks_centroids)  "
                + ")  "
                + "SELECT "
                + "MIN(ST_DISTANCE(ST_TRANSFORM(cen.centroid,32138), ST_TRANSFORM (stop.the_geom,32138)) ) AS distance, "
                + "cen.logrecno  "
                + "FROM   "
                + "not_covered_blocks_centroids AS cen,   "
                + "martyo.tarrant_gtfs_stops AS stop  "
                + "GROUP BY cen.centroid, cen.logrecno ), "
                + "pod_stop_min_distances AS(  "
                + "SELECT "
                + "MIN(ST_DISTANCE(ST_TRANSFORM(pod.location,32138), ST_TRANSFORM(stop.the_geom,32138)) ) AS distance, "
                + "pod.id  "
                + "FROM   "
                + "(SELECT * FROM " + prefix + DefaultConstants.POD_SUFFIX + " WHERE onoff='true') AS pod,   "
                + "martyo.tarrant_gtfs_stops AS stop  "
                + "GROUP BY pod.location, pod.id  ORDER BY distance ) "
                + "SELECT "
                + "cen.logrecno AS logrecno, "
                + "pod.id AS pod_id,"
                + "pod.distance AS pod_distance, "
                + "cen.distance AS cen_distance "
                + "FROM  "
                + "not_covered_centroid_distances AS cen,  "
                + "pod_stop_min_distances AS pod "
                + "WHERE "
                + "((" + dw + "-pod.distance) >= cen.distance) "
                + "ORDER BY cen.logrecno, pod_distance ; ";

        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);
        System.out.println("block logrecno, candidate pod id, distance from candidate pod to closest transit stop, distance from block centroid to closest transit stop");
        while (results.next()) {
            System.out.println(results.getString("logrecno") + ", " + results.getInt("pod_id") + ", " + results.getDouble("pod_distance") + ", " + results.getDouble("cen_distance"));
        }
        System.out.println("End of New Method!!!!!!!!!!");

    }

    private int chooseBestLoc(int pod_id) throws SQLException {

        LinkedList locations = new LinkedList();

        // First get a list of potential POD locations in this catchment area
        String query = "SELECT  pod.id AS pod_id"
                + "FROM  martyo.workingcpy_m20130404g_pods AS pod, "
                + "(  "
                + "SELECT cat.the_geom "
                + "FROM  martyo.workingcpy_m20130404g_catchment AS cat "
                + "WHERE id=4 "
                + ") AS catchment "
                + "WHERE  ST_WITHIN(pod.location,catchment.the_geom);";
        System.out.println(query);
        ResultSet results = REPLAN.getController().getConnection().createStatement().executeQuery(query);


        while (results.next()) {
            locations.add(results.getInt("pod_id"));
        }


// Next compute coverage of each potential POD location, keeping track of which one is greatest
        for (int i = 0; i < locations.size(); i++) {

            locations.get(i);

            query = "SELECT ST_DISTANCE( ST_TRANSFORM...";
        }

// Return the POD location with greatest coverage
        return 1;
    }
}
