/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.unt.cerl.replan.vulnerability.transportation.model;

import edu.unt.cerl.replan.REPLAN;
import edu.unt.cerl.replan.model.ScenarioState;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author martyo
 */
public class GtfsGraph {

    private class V {

        private int stop_id;
        private int time_hour;
        private int time_minute;
        private int time_second;
        private int stop_sequence;

        public V(int stop_id, int time_hour, int time_minute, int time_second, int stop_sequence) {
            this.stop_id = stop_id;
            this.time_hour = time_hour;
            this.time_minute = time_minute;
            this.time_second = time_second;
            this.stop_sequence = stop_sequence;
        }
    }
    final String V_SUFFIX = "_gtfs_graph_v";
    final String E_SUFFIX = "_gtfs_graph_e";
    HashMap v, e;

    public GtfsGraph() throws SQLException {
        v = new HashMap();
        e = new HashMap();

        createGraphTables();
        createV();
        //createE();
    }

    private void createE() {
        System.out.println("Beginning of createE()");
        ScenarioState s = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState();
        Connection c = REPLAN.getController().getConnection();

        // create "waiting" edges for subsequent times at same stop_id
        // create "moving" edges for each record in stop_time

        HashMap stops = new HashMap();
//        LinkedList temp = new LinkedList();
        for (Object value : v.values()) {
            System.out.println(((V) value).stop_id);
            if (!stops.containsKey(((V) value).stop_id)) {   // if this stop_id is not in hasmap yet, created linked list, add to hashmap
                System.out.println("Are we getting here 1");
                stops.put(((V) value).stop_id, new LinkedList());
                System.out.println("Are we getting here 2");
            }
            System.out.println("Are we getting here 3");
    
            ((LinkedList) stops.get(((V) value).stop_id)).add(value); //add object to linked list in hash map with stop_id as key
            System.out.println("Are we getting here 4");
            // System.out.println(((V) value).stop_id);
        }




        for (Object value : stops.values()){
            //((Collections) value).sort(null);
            System.out.println("Are we getting here 5");
            Collections.sort((LinkedList) value);
            //Collections.sort(null, null)
            System.out.println("Are we getting here 6");
            for (int i=0; i<((LinkedList) value).size(); i++){
                System.out.println(

                        ((V) ((LinkedList) value).get(i)).stop_sequence
                        );
            }

        }

        //iterate through hashmap
        // -- sort linked list by stop_sequence
        // -- add edge between each two stops in each linked list

        System.out.println("End of createE()");
    }

    private void createV() throws SQLException {
        //V v = new V(1, 1, 1, 1);
        //int x = v.stop_id;

        ScenarioState s = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState();
        Connection c = REPLAN.getController().getConnection();

        String query = "SELECT * FROM martyo.tarrant_gtfs_stop_times "
                + "ORDER BY trip_id ASC, stop_sequence ASC;";

        System.out.println(query);
        ResultSet results = c.createStatement().executeQuery(query);

        while (results.next()) {

            //v.add(new V(results.getInt("stop_id"),results.getInt("arrival_time_hour"),results.getInt("arrival_time_minute"),results.getInt("arrival_time_second")));
            String key = results.getString("stop_id") + "_" + results.getString("arrival_time_hour") + "_" + results.getString("arrival_time_minute") + "_" + results.getString("arrival_time_second");
            if (!v.containsKey(key)) {
                v.put(key, new V(results.getInt("stop_id"), results.getInt("arrival_time_hour"), results.getInt("arrival_time_minute"), results.getInt("arrival_time_second"), results.getInt("stop_sequence")));
                System.out.println("Adding key " + key);
            } else {
                System.out.println("Duplicate key found during VERTEX list creation - skipping addition of key " + key + " trip_id: " + results.getInt("trip_id"));
            }
        }

        System.out.println("Created " + v.size() + " vertices!");
    }

    public void createGraphTables() throws SQLException {

        ScenarioState s = REPLAN.getMainFrame().getTabs().getSelectedScenario().getState();
        Connection c = REPLAN.getController().getConnection();

        String query = "CREATE TABLE " + s.getAuthor() + "." + s.getWorkingCopyName() + V_SUFFIX + "("
                + "stop_id integer,"
                + "time_hour integer,"
                + "time_minute integer,"
                + "time_second integer"
                + ");";
        System.out.println(query);
        c.createStatement().executeUpdate(query);


        query = "CREATE TABLE " + s.getAuthor() + "." + s.getWorkingCopyName() + E_SUFFIX + "("
                + "from_stop_id integer,"
                + "to_stop_id integer,"
                + "from_time_hour integer,"
                + "from_time_minute integer,"
                + "from_time_second integer,"
                + "to_time_hour integer,"
                + "to_time_minute integer,"
                + "to_time_second integer,"
                + "from_trip_id integer,"
                + "to_trip_id integer,"
                + "from_stop_sequence integer,"
                + "to_stop_sequence integer"
                + ");";
        System.out.println(query);
        c.createStatement().executeUpdate(query);



    }
}
